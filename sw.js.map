{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/addPlugins.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-core/clientsClaim.js","../node_modules/workbox-core/skipWaiting.js","../src/sw.ts"],"names":["fallback","code","args","msg","messageGenerator","WorkboxError","errorCode","details","message","_cacheNameDetails","_createCacheName","cacheName","value","eachCacheNameDetail","fn","key","cacheNames","userCacheName","waitUntil","event","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","revision","url","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","request","state","cachedResponse","PrecacheCacheKeyPlugin","precacheController","params","cacheKey","supportStatus","canConstructResponseFromBodyStream","testResponse","copyResponse","response","modifier","origin","clonedResponse","responseInit","modifiedResponseInit","body","getFriendlyURL","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","matchOptions","strippedRequestURL","keysOptions","cacheKeys","strippedCacheKeyURL","Deferred","resolve","reject","quotaErrorCallbacks","executeQuotaErrorCallbacks","callback","timeout","ms","toRequest","input","StrategyHandler","strategy","options","plugin","possiblePreloadResponse","originalRequest","cb","err","pluginFilteredRequest","fetchResponse","error","responseClone","effectiveRequest","multiMatchOptions","responseToCache","hasCacheUpdateCallback","oldResponse","mode","name","statefulParam","promise","pluginsUsed","Strategy","responseDone","handler","handlerDone","waitUntilError","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","getOrCreatePrecacheController","addPlugins","defaultMethod","normalizeHandler","Route","match","method","RegExpRoute","regExp","result","Router","responsePromise","payload","requestPromises","sameOrigin","route","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","matchCallback","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","precache","precacheAndRoute","clientsClaim","skipWaiting","manifest","headersCrossOrigIsolate","original","headers","r","handle"],"mappings":"AAEA,IAAI;AACA,OAAK,yBAAyB;AAClC,QACA;AAAU;ACIV,MAAM,IAAW,CAAC,MAAS,MAAS;AAChC,MAAI,IAAM;AACV,SAAI,EAAK,SAAS,MACd,KAAO,OAAO,KAAK,UAAU,CAAI,MAE9B;AACX,GAQa,IAA2D;ACLxE,MAAM,UAAqB,MAAM;AAAA,EAS7B,YAAY,GAAW,GAAS;AAC5B,UAAM,IAAU,EAAiB,GAAW,CAAO;AACnD,UAAM,CAAO,GACb,KAAK,OAAO,GACZ,KAAK,UAAU;AAAA,EAClB;AACL;ACzBA,MAAM,IAAoB;AAAA,EACtB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ,OAAO,eAAiB,MAAc,aAAa,QAAQ;AACvE,GACM,IAAmB,CAAC,MACf,CAAC,EAAkB,QAAQ,GAAW,EAAkB,MAAM,EAChE,OAAO,CAAC,MAAU,KAAS,EAAM,SAAS,CAAC,EAC3C,KAAK,GAAG,GAEX,IAAsB,CAAC,MAAO;AAChC,aAAW,KAAO,OAAO,KAAK,CAAiB;AAC3C,IAAA,EAAG,CAAG;AAEd,GACa,IAAa;AAAA,EACtB,eAAe,CAAC,MAAY;AACxB,IAAA,EAAoB,CAAC,MAAQ;AACzB,MAAI,OAAO,EAAQ,MAAS,aACxB,EAAkB,KAAO,EAAQ;AAAA,IAEjD,CAAS;AAAA,EACJ;AAAA,EACD,wBAAwB,CAAC,MACd,KAAiB,EAAiB,EAAkB,eAAe;AAAA,EAE9E,iBAAiB,CAAC,MACP,KAAiB,EAAiB,EAAkB,QAAQ;AAAA,EAEvE,WAAW,MACA,EAAkB;AAAA,EAE7B,gBAAgB,CAAC,MACN,KAAiB,EAAiB,EAAkB,OAAO;AAAA,EAEtE,WAAW,MACA,EAAkB;AAEjC;AChCA,SAAS,EAAU,GAAO,GAAS;AAC/B,QAAM,IAAgB;AACtB,SAAA,EAAM,UAAU,CAAa,GACtB;AACX;AClBA,IAAI;AACA,OAAK,+BAA+B;AACxC,QACA;AAAU;ACKV,MAAM,IAAwB;AAUvB,SAAS,EAAe,GAAO;AAClC,MAAI,CAAC;AACD,UAAM,IAAI,EAAa,qCAAqC,EAAE,OAAA,EAAO,CAAA;AAIzE,MAAI,OAAO,KAAU,UAAU;AAC3B,UAAM,IAAY,IAAI,IAAI,GAAO,SAAS,IAAI;AAC9C,WAAO;AAAA,MACH,UAAU,EAAU;AAAA,MACpB,KAAK,EAAU;AAAA,IAC3B;AAAA,EACK;AACD,QAAM,EAAE,UAAA,GAAU,KAAA,EAAK,IAAG;AAC1B,MAAI,CAAC;AACD,UAAM,IAAI,EAAa,qCAAqC,EAAE,OAAA,EAAO,CAAA;AAIzE,MAAI,CAAC,GAAU;AACX,UAAM,IAAY,IAAI,IAAI,GAAK,SAAS,IAAI;AAC5C,WAAO;AAAA,MACH,UAAU,EAAU;AAAA,MACpB,KAAK,EAAU;AAAA,IAC3B;AAAA,EACK;AAGD,QAAM,IAAc,IAAI,IAAI,GAAK,SAAS,IAAI,GACxC,IAAc,IAAI,IAAI,GAAK,SAAS,IAAI;AAC9C,SAAA,EAAY,aAAa,IAAI,GAAuB,CAAQ,GACrD;AAAA,IACH,UAAU,EAAY;AAAA,IACtB,KAAK,EAAY;AAAA,EACzB;AACA;ACzCA,MAAM,EAA4B;AAAA,EAC9B,cAAc;AACV,SAAK,cAAc,IACnB,KAAK,iBAAiB,IACtB,KAAK,mBAAmB,OAAO,EAAE,SAAA,GAAS,OAAA,EAAK,MAAQ;AAEnD,MAAI,MACA,EAAM,kBAAkB;AAAA,IAExC,GACQ,KAAK,2BAA2B,OAAO,EAAE,OAAA,GAAO,OAAA,GAAO,gBAAA,EAAc,MAAQ;AACzE,UAAI,EAAM,SAAS,aACX,KACA,EAAM,mBACN,EAAM,2BAA2B,SAAS;AAE1C,cAAM,IAAM,EAAM,gBAAgB;AAClC,QAAI,IACA,KAAK,eAAe,KAAK,CAAG,IAG5B,KAAK,YAAY,KAAK,CAAG;AAAA,MAEhC;AAEL,aAAO;AAAA,IACnB;AAAA,EACK;AACL;AC5BA,MAAM,EAAuB;AAAA,EACzB,YAAY,EAAE,oBAAA,KAAsB;AAChC,SAAK,qBAAqB,OAAO,EAAE,SAAA,GAAS,QAAA,EAAM,MAAQ;AAGtD,YAAM,KAAY,KAAW,OAA4B,SAAS,EAAO,aACrE,KAAK,oBAAoB,kBAAkB,EAAQ,GAAG;AAE1D,aAAO,IACD,IAAI,QAAQ,GAAU,EAAE,SAAS,EAAQ,QAAO,CAAE,IAClD;AAAA,IAClB,GACQ,KAAK,sBAAsB;AAAA,EAC9B;AACL;ACpBA,IAAI;AAUJ,SAAS,IAAqC;AAC1C,MAAI,MAAkB,QAAW;AAC7B,UAAM,IAAe,IAAI,SAAS,EAAE;AACpC,QAAI,UAAU;AACV,UAAI;AACA,YAAI,SAAS,EAAa,IAAI,GAC9B,IAAgB;AAAA,MACnB,QACD;AACI,QAAA,IAAgB;AAAA,MACnB;AAEL,IAAA,IAAgB;AAAA,EACnB;AACD,SAAO;AACX;ACJA,eAAe,EAAa,GAAU,GAAU;AAC5C,MAAI,IAAS;AAMb,MAJI,EAAS,QAET,IADoB,IAAI,IAAI,EAAS,GAAG,EACnB,SAErB,MAAW,KAAK,SAAS;AACzB,UAAM,IAAI,EAAa,8BAA8B,EAAE,QAAA,EAAQ,CAAA;AAEnE,QAAM,IAAiB,EAAS,SAE1B,IAAe;AAAA,IACjB,SAAS,IAAI,QAAQ,EAAe,OAAO;AAAA,IAC3C,QAAQ,EAAe;AAAA,IACvB,YAAY,EAAe;AAAA,EACnC,GAEU,IAAuB,IAAW,EAAS,CAAY,IAAI,GAI3D,IAAO,EAAoC,IAC3C,EAAe,OACf,MAAM,EAAe;AAC3B,SAAO,IAAI,SAAS,GAAM,CAAoB;AAClD;AC/CA,MAAM,IAAiB,CAAC,MACL,IAAI,IAAI,OAAO,CAAG,GAAG,SAAS,IAAI,EAGnC,KAAK,QAAQ,IAAI,OAAO,IAAI,SAAS,QAAQ,GAAG,EAAE;ACLpE,SAAS,EAAY,GAAS,GAAc;AACxC,QAAM,IAAc,IAAI,IAAI,CAAO;AACnC,aAAW,KAAS;AAChB,IAAA,EAAY,aAAa,OAAO,CAAK;AAEzC,SAAO,EAAY;AACvB;AAaA,eAAe,EAAuB,GAAO,GAAS,GAAc,GAAc;AAC9E,QAAM,IAAqB,EAAY,EAAQ,KAAK,CAAY;AAEhE,MAAI,EAAQ,QAAQ;AAChB,WAAO,EAAM,MAAM,GAAS,CAAY;AAG5C,QAAM,IAAc,OAAO,OAAO,OAAO,OAAO,IAAI,CAAY,GAAG,EAAE,cAAc,GAAM,CAAA,GACnF,IAAY,MAAM,EAAM,KAAK,GAAS,CAAW;AACvD,aAAW,KAAY,GAAW;AAC9B,UAAM,IAAsB,EAAY,EAAS,KAAK,CAAY;AAClE,QAAI,MAAuB;AACvB,aAAO,EAAM,MAAM,GAAU,CAAY;AAAA,EAEhD;AAEL;AC1BA,MAAM,EAAS;AAAA,EAIX,cAAc;AACV,SAAK,UAAU,IAAI,QAAQ,CAAC,GAAS,MAAW;AAC5C,WAAK,UAAU,GACf,KAAK,SAAS;AAAA,IAC1B,CAAS;AAAA,EACJ;AACL;ACfA,MAAM,IAAsB,oBAAI,IAAK;ACMrC,eAAe,IAA6B;AAKxC,aAAW,KAAY;AACnB,UAAM,EAAQ;AAQtB;AChBO,SAAS,EAAQ,GAAI;AACxB,SAAO,IAAI,QAAQ,CAAC,MAAY,WAAW,GAAS,CAAE,CAAC;AAC3D;ACfA,IAAI;AACA,OAAK,+BAA+B;AACxC,QACA;AAAU;ACWV,SAAS,EAAU,GAAO;AACtB,SAAO,OAAO,KAAU,WAAW,IAAI,QAAQ,CAAK,IAAI;AAC5D;AAUA,MAAM,EAAgB;AAAA,EAiBlB,YAAY,GAAU,GAAS;AAC3B,SAAK,aAAa,IA8ClB,OAAO,OAAO,MAAM,CAAO,GAC3B,KAAK,QAAQ,EAAQ,OACrB,KAAK,YAAY,GACjB,KAAK,mBAAmB,IAAI,KAC5B,KAAK,0BAA0B,IAG/B,KAAK,WAAW,CAAC,GAAG,EAAS,OAAO,GACpC,KAAK,kBAAkB,oBAAI;AAC3B,eAAW,KAAU,KAAK;AACtB,WAAK,gBAAgB,IAAI,GAAQ,CAAE,CAAA;AAEvC,SAAK,MAAM,UAAU,KAAK,iBAAiB,OAAO;AAAA,EACrD;AAAA,EAcD,MAAM,MAAM,GAAO;AACf,UAAM,EAAE,OAAA,EAAO,IAAG;AAClB,QAAI,IAAU,EAAU,CAAK;AAC7B,QAAI,EAAQ,SAAS,cACjB,aAAiB,cACjB,EAAM,iBAAiB;AACvB,YAAM,IAA2B,MAAM,EAAM;AAC7C,UAAI;AAKA,eAAO;AAAA,IAEd;AAID,UAAM,IAAkB,KAAK,YAAY,cAAc,IACjD,EAAQ,MAAO,IACf;AACN,QAAI;AACA,iBAAW,KAAM,KAAK,iBAAiB,kBAAkB;AACrD,QAAA,IAAU,MAAM,EAAG,EAAE,SAAS,EAAQ,MAAO,GAAE,OAAA,EAAK,CAAE;AAAA,IAE7D,SACM,GAAP;AACI,UAAI,aAAe;AACf,cAAM,IAAI,EAAa,mCAAmC;AAAA,UACtD,oBAAoB,EAAI;AAAA,QAC5C,CAAiB;AAAA,IAER;AAID,UAAM,IAAwB,EAAQ;AACtC,QAAI;AACA,UAAI;AAEJ,MAAA,IAAgB,MAAM,MAAM,GAAS,EAAQ,SAAS,aAAa,SAAY,KAAK,UAAU,YAAY;AAM1G,iBAAW,KAAY,KAAK,iBAAiB,iBAAiB;AAC1D,QAAA,IAAgB,MAAM,EAAS;AAAA,UAC3B,OAAA;AAAA,UACA,SAAS;AAAA,UACT,UAAU;AAAA,QAC9B,CAAiB;AAEL,aAAO;AAAA,IACV,SACM,GAAP;AAOI,YAAI,KACA,MAAM,KAAK,aAAa,gBAAgB;AAAA,QACpC,OAAO;AAAA,QACP,OAAA;AAAA,QACA,iBAAiB,EAAgB,MAAO;AAAA,QACxC,SAAS,EAAsB,MAAO;AAAA,MAC1D,CAAiB,GAEC;AAAA,IACT;AAAA,EACJ;AAAA,EAWD,MAAM,iBAAiB,GAAO;AAC1B,UAAM,IAAW,MAAM,KAAK,MAAM,CAAK,GACjC,IAAgB,EAAS;AAC/B,WAAK,KAAK,UAAU,KAAK,SAAS,GAAO,CAAa,CAAC,GAChD;AAAA,EACV;AAAA,EAaD,MAAM,WAAW,GAAK;AAClB,UAAM,IAAU,EAAU,CAAG;AAC7B,QAAI;AACJ,UAAM,EAAE,WAAA,GAAW,cAAA,MAAiB,KAAK,WACnC,IAAmB,MAAM,KAAK,YAAY,GAAS,MAAM,GACzD,IAAoB,OAAO,OAAO,OAAO,OAAO,CAAE,GAAE,CAAY,GAAG,EAAE,WAAA,EAAS,CAAE;AACtF,IAAA,IAAiB,MAAM,OAAO,MAAM,GAAkB,CAAiB;AASvE,eAAW,KAAY,KAAK,iBAAiB,0BAA0B;AACnE,MAAA,IACK,MAAM,EAAS;AAAA,QACZ,WAAA;AAAA,QACA,cAAA;AAAA,QACA,gBAAA;AAAA,QACA,SAAS;AAAA,QACT,OAAO,KAAK;AAAA,MACf,CAAA,KAAM;AAEf,WAAO;AAAA,EACV;AAAA,EAgBD,MAAM,SAAS,GAAK,GAAU;AAC1B,UAAM,IAAU,EAAU,CAAG;AAG7B,UAAM,EAAQ,CAAC;AACf,UAAM,IAAmB,MAAM,KAAK,YAAY,GAAS,OAAO;AAiBhE,QAAI,CAAC;AAKD,YAAM,IAAI,EAAa,8BAA8B;AAAA,QACjD,KAAK,EAAe,EAAiB,GAAG;AAAA,MACxD,CAAa;AAEL,UAAM,IAAkB,MAAM,KAAK,2BAA2B,CAAQ;AACtE,QAAI,CAAC;AAKD,aAAO;AAEX,UAAM,EAAE,WAAA,GAAW,cAAA,MAAiB,KAAK,WACnC,IAAQ,MAAM,KAAK,OAAO,KAAK,CAAS,GACxC,IAAyB,KAAK,YAAY,gBAAgB,GAC1D,IAAc,IACd,MAAM;AAAA,MAIR;AAAA,MAAO,EAAiB,MAAK;AAAA,MAAI,CAAC,iBAAiB;AAAA,MAAG;AAAA,IAAY,IAChE;AAKN,QAAI;AACA,YAAM,EAAM,IAAI,GAAkB,IAAyB,EAAgB,MAAK,IAAK,CAAe;AAAA,IACvG,SACM,GAAP;AACI,UAAI,aAAiB;AAEjB,cAAI,EAAM,SAAS,wBACf,MAAM,EAA0B,GAE9B;AAAA,IAEb;AACD,eAAW,KAAY,KAAK,iBAAiB,gBAAgB;AACzD,YAAM,EAAS;AAAA,QACX,WAAA;AAAA,QACA,aAAA;AAAA,QACA,aAAa,EAAgB,MAAO;AAAA,QACpC,SAAS;AAAA,QACT,OAAO,KAAK;AAAA,MAC5B,CAAa;AAEL,WAAO;AAAA,EACV;AAAA,EAYD,MAAM,YAAY,GAAS,GAAM;AAC7B,UAAM,IAAM,GAAG,EAAQ,SAAS;AAChC,QAAI,CAAC,KAAK,WAAW,IAAM;AACvB,UAAI,IAAmB;AACvB,iBAAW,KAAY,KAAK,iBAAiB,oBAAoB;AAC7D,QAAA,IAAmB,EAAU,MAAM,EAAS;AAAA,UACxC,MAAA;AAAA,UACA,SAAS;AAAA,UACT,OAAO,KAAK;AAAA,UAEZ,QAAQ,KAAK;AAAA,QAChB,CAAA,CAAC;AAEN,WAAK,WAAW,KAAO;AAAA,IAC1B;AACD,WAAO,KAAK,WAAW;AAAA,EAC1B;AAAA,EAQD,YAAY,GAAM;AACd,eAAW,KAAU,KAAK,UAAU;AAChC,UAAI,KAAQ;AACR,eAAO;AAGf,WAAO;AAAA,EACV;AAAA,EAiBD,MAAM,aAAa,GAAM,GAAO;AAC5B,eAAW,KAAY,KAAK,iBAAiB,CAAI;AAG7C,YAAM,EAAS,CAAK;AAAA,EAE3B;AAAA,EAUD,CAAC,iBAAiB,GAAM;AACpB,eAAW,KAAU,KAAK,UAAU;AAChC,UAAI,OAAO,EAAO,MAAU,YAAY;AACpC,cAAM,IAAQ,KAAK,gBAAgB,IAAI,CAAM;AAO7C,cANyB,CAAC,MAAU;AAChC,gBAAM,IAAgB,OAAO,OAAO,OAAO,OAAO,CAAE,GAAE,CAAK,GAAG,EAAE,OAAA,EAAK,CAAE;AAGvE,iBAAO,EAAO,GAAM,CAAa;AAAA,QACrD;AAAA,MAEa;AAAA,EAER;AAAA,EAcD,UAAU,GAAS;AACf,gBAAK,wBAAwB,KAAK,CAAO,GAClC;AAAA,EACV;AAAA,EAWD,MAAM,cAAc;AAChB,QAAI;AACJ,WAAQ,IAAU,KAAK,wBAAwB,MAAK;AAChD,YAAM;AAAA,EAEb;AAAA,EAKD,UAAU;AACN,SAAK,iBAAiB,QAAQ,IAAI;AAAA,EACrC;AAAA,EAWD,MAAM,2BAA2B,GAAU;AACvC,QAAI,IAAkB,GAClB,IAAc;AAClB,eAAW,KAAY,KAAK,iBAAiB,iBAAiB;AAQ1D,UAPA,IACK,MAAM,EAAS;AAAA,QACZ,SAAS,KAAK;AAAA,QACd,UAAU;AAAA,QACV,OAAO,KAAK;AAAA,MACf,CAAA,KAAM,QACX,IAAc,IACV,CAAC;AACD;AAGR,WAAK,KACG,KAAmB,EAAgB,WAAW,QAC9C,IAAkB,SAmBnB;AAAA,EACV;AACL;ACjfA,MAAM,EAAS;AAAA,EAuBX,YAAY,IAAU,IAAI;AAQtB,SAAK,YAAY,EAAW,eAAe,EAAQ,SAAS,GAQ5D,KAAK,UAAU,EAAQ,WAAW,CAAA,GAQlC,KAAK,eAAe,EAAQ,cAQ5B,KAAK,eAAe,EAAQ;AAAA,EAC/B;AAAA,EAoBD,OAAO,GAAS;AACZ,UAAM,CAAC,CAAY,IAAI,KAAK,UAAU,CAAO;AAC7C,WAAO;AAAA,EACV;AAAA,EAuBD,UAAU,GAAS;AAEf,IAAI,aAAmB,eACnB,IAAU;AAAA,MACN,OAAO;AAAA,MACP,SAAS,EAAQ;AAAA,IACjC;AAEQ,UAAM,IAAQ,EAAQ,OAChB,IAAU,OAAO,EAAQ,WAAY,WACrC,IAAI,QAAQ,EAAQ,OAAO,IAC3B,EAAQ,SACR,IAAS,YAAY,IAAU,EAAQ,SAAS,QAChD,IAAU,IAAI,EAAgB,MAAM,EAAE,OAAA,GAAO,SAAA,GAAS,QAAA,EAAM,CAAE,GAC9D,IAAe,KAAK,aAAa,GAAS,GAAS,CAAK,GACxD,IAAc,KAAK,eAAe,GAAc,GAAS,GAAS,CAAK;AAE7E,WAAO,CAAC,GAAc,CAAW;AAAA,EACpC;AAAA,EACD,MAAM,aAAa,GAAS,GAAS,GAAO;AACxC,UAAM,EAAQ,aAAa,oBAAoB,EAAE,OAAA,GAAO,SAAA,EAAO,CAAE;AACjE,QAAI;AACJ,QAAI;AAKA,UAJA,IAAW,MAAM,KAAK,QAAQ,GAAS,CAAO,GAI1C,CAAC,KAAY,EAAS,SAAS;AAC/B,cAAM,IAAI,EAAa,eAAe,EAAE,KAAK,EAAQ,IAAG,CAAE;AAAA,IAEjE,SACM,GAAP;AACI,UAAI,aAAiB;AACjB,mBAAW,KAAY,EAAQ,iBAAiB,iBAAiB;AAE7D,cADA,IAAW,MAAM,EAAS,EAAE,OAAA,GAAO,OAAA,GAAO,SAAA,EAAO,CAAE,GAC/C;AACA;AAAA;AAIZ,UAAI,CAAC;AACD,cAAM;AAAA,IAOb;AACD,eAAW,KAAY,EAAQ,iBAAiB,oBAAoB;AAChE,MAAA,IAAW,MAAM,EAAS,EAAE,OAAA,GAAO,SAAA,GAAS,UAAA,EAAQ,CAAE;AAE1D,WAAO;AAAA,EACV;AAAA,EACD,MAAM,eAAe,GAAc,GAAS,GAAS,GAAO;AACxD,QAAI,GACA;AACJ,QAAI;AACA,MAAA,IAAW,MAAM;AAAA,IACpB,QACD;AAAA,IAIC;AACD,QAAI;AACA,YAAM,EAAQ,aAAa,qBAAqB;AAAA,QAC5C,OAAA;AAAA,QACA,SAAA;AAAA,QACA,UAAA;AAAA,MAChB,CAAa,GACD,MAAM,EAAQ;IACjB,SACM,GAAP;AACI,MAAI,aAA0B,UAC1B,IAAQ;AAAA,IAEf;AAQD,QAPA,MAAM,EAAQ,aAAa,sBAAsB;AAAA,MAC7C,OAAA;AAAA,MACA,SAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAO;AAAA,IACnB,CAAS,GACD,EAAQ,QAAO,GACX;AACA,YAAM;AAAA,EAEb;AACL;ACvLA,MAAM,UAAyB,EAAS;AAAA,EAkBpC,YAAY,IAAU,IAAI;AACtB,IAAA,EAAQ,YAAY,EAAW,gBAAgB,EAAQ,SAAS,GAChE,MAAM,CAAO,GACb,KAAK,qBACD,EAAQ,sBAAsB,IAKlC,KAAK,QAAQ,KAAK,EAAiB,sCAAsC;AAAA,EAC5E;AAAA,EAQD,MAAM,QAAQ,GAAS,GAAS;AAC5B,UAAM,IAAW,MAAM,EAAQ,WAAW,CAAO;AACjD,WAAI,MAKA,EAAQ,SAAS,EAAQ,MAAM,SAAS,YACjC,MAAM,KAAK,eAAe,GAAS,CAAO,IAI9C,MAAM,KAAK,aAAa,GAAS,CAAO;AAAA,EAClD;AAAA,EACD,MAAM,aAAa,GAAS,GAAS;AACjC,QAAI;AACJ,UAAM,IAAU,EAAQ,UAAU,CAAE;AAEpC,QAAI,KAAK,oBAAoB;AAMzB,YAAM,IAAsB,EAAO,WAC7B,IAAqB,EAAQ,WAC7B,IAAsB,CAAC,KAAsB,MAAuB;AAG1E,MAAA,IAAW,MAAM,EAAQ,MAAM,IAAI,QAAQ,GAAS;AAAA,QAChD,WAAW,EAAQ,SAAS,YACtB,KAAsB,IACtB;AAAA,MACT,CAAA,CAAC,GAQE,KACA,KACA,EAAQ,SAAS,cACjB,KAAK,sCAAqC,GACxB,MAAM,EAAQ,SAAS,GAAS,EAAS,MAAK,CAAE;AAAA,IAQzE;AAIG,YAAM,IAAI,EAAa,0BAA0B;AAAA,QAC7C,WAAW,KAAK;AAAA,QAChB,KAAK,EAAQ;AAAA,MAC7B,CAAa;AAgBL,WAAO;AAAA,EACV;AAAA,EACD,MAAM,eAAe,GAAS,GAAS;AACnC,SAAK,sCAAqC;AAC1C,UAAM,IAAW,MAAM,EAAQ,MAAM,CAAO;AAI5C,QAAI,CADc,MAAM,EAAQ,SAAS,GAAS,EAAS,MAAK,CAAE;AAI9D,YAAM,IAAI,EAAa,2BAA2B;AAAA,QAC9C,KAAK,EAAQ;AAAA,QACb,QAAQ,EAAS;AAAA,MACjC,CAAa;AAEL,WAAO;AAAA,EACV;AAAA,EA4BD,wCAAwC;AACpC,QAAI,IAAqB,MACrB,IAA6B;AACjC,eAAW,CAAC,GAAO,CAAM,KAAK,KAAK,QAAQ;AAEvC,MAAI,MAAW,EAAiB,2CAI5B,MAAW,EAAiB,sCAC5B,IAAqB,IAErB,EAAO,mBACP;AAGR,IAAI,MAA+B,IAC/B,KAAK,QAAQ,KAAK,EAAiB,iCAAiC,IAE/D,IAA6B,KAAK,MAAuB,QAE9D,KAAK,QAAQ,OAAO,GAAoB,CAAC;AAAA,EAGhD;AACL;AACA,EAAiB,oCAAoC;AAAA,EACjD,MAAM,gBAAgB,EAAE,UAAA,KAAY;AAChC,WAAI,CAAC,KAAY,EAAS,UAAU,MACzB,OAEJ;AAAA,EACV;AACL;AACA,EAAiB,yCAAyC;AAAA,EACtD,MAAM,gBAAgB,EAAE,UAAA,KAAY;AAChC,WAAO,EAAS,aAAa,MAAM,EAAa,CAAQ,IAAI;AAAA,EAC/D;AACL;ACrMA,MAAM,EAAmB;AAAA,EAWrB,YAAY,EAAE,WAAA,GAAW,SAAA,IAAU,CAAE,GAAE,mBAAA,IAAoB,GAAO,IAAG,IAAI;AACrE,SAAK,mBAAmB,oBAAI,OAC5B,KAAK,oBAAoB,oBAAI,OAC7B,KAAK,0BAA0B,oBAAI,OACnC,KAAK,YAAY,IAAI,EAAiB;AAAA,MAClC,WAAW,EAAW,gBAAgB,CAAS;AAAA,MAC/C,SAAS;AAAA,QACL,GAAG;AAAA,QACH,IAAI,EAAuB,EAAE,oBAAoB,MAAM;AAAA,MAC1D;AAAA,MACD,mBAAA;AAAA,IACZ,CAAS,GAED,KAAK,UAAU,KAAK,QAAQ,KAAK,IAAI,GACrC,KAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AAAA,EAC1C;AAAA,EAKD,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EACf;AAAA,EAWD,SAAS,GAAS;AACd,SAAK,eAAe,CAAO,GACtB,KAAK,oCACN,KAAK,iBAAiB,WAAW,KAAK,OAAO,GAC7C,KAAK,iBAAiB,YAAY,KAAK,QAAQ,GAC/C,KAAK,kCAAkC;AAAA,EAE9C;AAAA,EAQD,eAAe,GAAS;AASpB,UAAM,IAAkB,CAAA;AACxB,eAAW,KAAS,GAAS;AAEzB,MAAI,OAAO,KAAU,WACjB,EAAgB,KAAK,CAAK,IAErB,KAAS,EAAM,aAAa,UACjC,EAAgB,KAAK,EAAM,GAAG;AAElC,YAAM,EAAE,UAAA,GAAU,KAAA,EAAK,IAAG,EAAe,CAAK,GACxC,IAAY,OAAO,KAAU,YAAY,EAAM,WAAW,WAAW;AAC3E,UAAI,KAAK,iBAAiB,IAAI,CAAG,KAC7B,KAAK,iBAAiB,IAAI,CAAG,MAAM;AACnC,cAAM,IAAI,EAAa,yCAAyC;AAAA,UAC5D,YAAY,KAAK,iBAAiB,IAAI,CAAG;AAAA,UACzC,aAAa;AAAA,QACjC,CAAiB;AAEL,UAAI,OAAO,KAAU,YAAY,EAAM,WAAW;AAC9C,YAAI,KAAK,wBAAwB,IAAI,CAAQ,KACzC,KAAK,wBAAwB,IAAI,CAAQ,MAAM,EAAM;AACrD,gBAAM,IAAI,EAAa,6CAA6C;AAAA,YAChE,KAAA;AAAA,UACxB,CAAqB;AAEL,aAAK,wBAAwB,IAAI,GAAU,EAAM,SAAS;AAAA,MAC7D;AAGD,UAFA,KAAK,iBAAiB,IAAI,GAAK,CAAQ,GACvC,KAAK,kBAAkB,IAAI,GAAK,CAAS,GACrC,EAAgB,SAAS,GAAG;AAC5B,cAAM,IAAiB,qDACV,EAAgB,KAAK,IAAI;AAAA;AAKlC,gBAAQ,KAAK,CAAc;AAAA,MAKlC;AAAA,IACJ;AAAA,EACJ;AAAA,EAWD,QAAQ,GAAO;AAGX,WAAO,EAAU,GAAO,YAAY;AAChC,YAAM,IAAsB,IAAI;AAChC,WAAK,SAAS,QAAQ,KAAK,CAAmB;AAG9C,iBAAW,CAAC,GAAK,CAAQ,KAAK,KAAK,kBAAkB;AACjD,cAAM,IAAY,KAAK,wBAAwB,IAAI,CAAQ,GACrD,IAAY,KAAK,kBAAkB,IAAI,CAAG,GAC1C,IAAU,IAAI,QAAQ,GAAK;AAAA,UAC7B,WAAA;AAAA,UACA,OAAO;AAAA,UACP,aAAa;AAAA,QACjC,CAAiB;AACD,cAAM,QAAQ,IAAI,KAAK,SAAS,UAAU;AAAA,UACtC,QAAQ,EAAE,UAAA,EAAU;AAAA,UACpB,SAAA;AAAA,UACA,OAAA;AAAA,QACH,CAAA,CAAC;AAAA,MACL;AACD,YAAM,EAAE,aAAA,GAAa,gBAAA,EAAgB,IAAG;AAIxC,aAAO,EAAE,aAAA,GAAa,gBAAA;IAClC,CAAS;AAAA,EACJ;AAAA,EAWD,SAAS,GAAO;AAGZ,WAAO,EAAU,GAAO,YAAY;AAChC,YAAM,IAAQ,MAAM,KAAK,OAAO,KAAK,KAAK,SAAS,SAAS,GACtD,IAA0B,MAAM,EAAM,QACtC,IAAoB,IAAI,IAAI,KAAK,iBAAiB,OAAM,CAAE,GAC1D,IAAc,CAAA;AACpB,iBAAW,KAAW;AAClB,QAAK,EAAkB,IAAI,EAAQ,GAAG,MAClC,MAAM,EAAM,OAAO,CAAO,GAC1B,EAAY,KAAK,EAAQ,GAAG;AAMpC,aAAO,EAAE,aAAA,EAAW;AAAA,IAChC,CAAS;AAAA,EACJ;AAAA,EAOD,qBAAqB;AACjB,WAAO,KAAK;AAAA,EACf;AAAA,EAOD,gBAAgB;AACZ,WAAO,CAAC,GAAG,KAAK,iBAAiB,KAAM,CAAA;AAAA,EAC1C;AAAA,EAUD,kBAAkB,GAAK;AACnB,UAAM,IAAY,IAAI,IAAI,GAAK,SAAS,IAAI;AAC5C,WAAO,KAAK,iBAAiB,IAAI,EAAU,IAAI;AAAA,EAClD;AAAA,EAMD,wBAAwB,GAAU;AAC9B,WAAO,KAAK,wBAAwB,IAAI,CAAQ;AAAA,EACnD;AAAA,EAmBD,MAAM,cAAc,GAAS;AACzB,UAAM,IAAM,aAAmB,UAAU,EAAQ,MAAM,GACjD,IAAW,KAAK,kBAAkB,CAAG;AAC3C,QAAI;AAEA,cADc,MAAM,KAAK,OAAO,KAAK,KAAK,SAAS,SAAS,GAC/C,MAAM,CAAQ;AAAA,EAGlC;AAAA,EASD,wBAAwB,GAAK;AACzB,UAAM,IAAW,KAAK,kBAAkB,CAAG;AAC3C,QAAI,CAAC;AACD,YAAM,IAAI,EAAa,qBAAqB,EAAE,KAAA,EAAK,CAAA;AAEvD,WAAO,CAAC,OACJ,EAAQ,UAAU,IAAI,QAAQ,CAAG,GACjC,EAAQ,SAAS,OAAO,OAAO,EAAE,UAAA,KAAY,EAAQ,MAAM,GACpD,KAAK,SAAS,OAAO,CAAO;AAAA,EAE1C;AACL;ACzRA,IAAI;AAKG,MAAM,IAAgC,OACpC,MACD,IAAqB,IAAI,MAEtB;ACFX,SAAS,EAAW,GAAS;AAEzB,EAD2B,IACR,SAAS,QAAQ,KAAK,GAAG,CAAO;AACvD;ACjBA,IAAI;AACA,OAAK,4BAA4B;AACrC,QACA;AAAU;ACWH,MAAM,IAAgB,OCAhB,IAAmB,CAAC,MACzB,KAAW,OAAO,KAAY,WASvB,IAWA,EAAE,QAAQ;ACjBzB,MAAM,EAAM;AAAA,EAYR,YAAY,GAAO,GAAS,IAAS,GAAe;AAchD,SAAK,UAAU,EAAiB,CAAO,GACvC,KAAK,QAAQ,GACb,KAAK,SAAS;AAAA,EACjB;AAAA,EAMD,gBAAgB,GAAS;AACrB,SAAK,eAAe,EAAiB,CAAO;AAAA,EAC/C;AACL;ACpCA,MAAM,UAAoB,EAAM;AAAA,EAc5B,YAAY,GAAQ,GAAS,GAAQ;AASjC,UAAM,IAAQ,CAAC,EAAE,KAAA,QAAU;AACvB,YAAM,IAAS,EAAO,KAAK,EAAI,IAAI;AAEnC,UAAI,EAAC,KAOD,EAAA,EAAI,WAAW,SAAS,UAAU,EAAO,UAAU;AAYvD,eAAO,EAAO,MAAM,CAAC;AAAA,IACjC;AACQ,UAAM,GAAO,GAAS,CAAM;AAAA,EAC/B;AACL;ACxCA,MAAM,EAAO;AAAA,EAIT,cAAc;AACV,SAAK,UAAU,oBAAI,OACnB,KAAK,qBAAqB,oBAAI;EACjC;AAAA,EAMD,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EACf;AAAA,EAKD,mBAAmB;AAEf,SAAK,iBAAiB,SAAU,CAAC,MAAU;AACvC,YAAM,EAAE,SAAA,EAAS,IAAG,GACd,IAAkB,KAAK,cAAc,EAAE,SAAA,GAAS,OAAA,EAAK,CAAE;AAC7D,MAAI,KACA,EAAM,YAAY,CAAe;AAAA,IAEjD;EACK;AAAA,EAuBD,mBAAmB;AAEf,SAAK,iBAAiB,WAAY,CAAC,MAAU;AAGzC,UAAI,EAAM,QAAQ,EAAM,KAAK,SAAS,cAAc;AAEhD,cAAM,EAAE,SAAA,EAAO,IAAK,EAAM,MAIpB,IAAkB,QAAQ,IAAI,EAAQ,YAAY,IAAI,CAAC,MAAU;AACnE,UAAI,OAAO,KAAU,aACjB,IAAQ,CAAC,CAAK;AAElB,gBAAM,IAAU,IAAI,QAAQ,GAAG,CAAK;AACpC,iBAAO,KAAK,cAAc,EAAE,SAAA,GAAS,OAAA,EAAO,CAAA;AAAA,QAI/C,CAAA,CAAC;AACF,QAAA,EAAM,UAAU,CAAe,GAE3B,EAAM,SAAS,EAAM,MAAM,MACtB,EAAgB,KAAK,MAAM,EAAM,MAAM,GAAG,YAAY,EAAI,CAAC;AAAA,MAEvE;AAAA,IACb;EACK;AAAA,EAaD,cAAc,EAAE,SAAA,GAAS,OAAA,KAAU;AAS/B,UAAM,IAAM,IAAI,IAAI,EAAQ,KAAK,SAAS,IAAI;AAC9C,QAAI,CAAC,EAAI,SAAS,WAAW,MAAM;AAI/B;AAEJ,UAAM,IAAa,EAAI,WAAW,SAAS,QACrC,EAAE,QAAA,GAAQ,OAAA,MAAU,KAAK,kBAAkB;AAAA,MAC7C,OAAA;AAAA,MACA,SAAA;AAAA,MACA,YAAA;AAAA,MACA,KAAA;AAAA,IACZ,CAAS;AACD,QAAI,IAAU,KAAS,EAAM;AAe7B,UAAM,IAAS,EAAQ;AAQvB,QAPI,CAAC,KAAW,KAAK,mBAAmB,IAAI,CAAM,MAK9C,IAAU,KAAK,mBAAmB,IAAI,CAAM,IAE5C,CAAC;AAMD;AAkBJ,QAAI;AACJ,QAAI;AACA,MAAA,IAAkB,EAAQ,OAAO,EAAE,KAAA,GAAK,SAAA,GAAS,OAAA,GAAO,QAAA,EAAM,CAAE;AAAA,IACnE,SACM,GAAP;AACI,MAAA,IAAkB,QAAQ,OAAO,CAAG;AAAA,IACvC;AAED,UAAM,IAAe,KAAS,EAAM;AACpC,WAAI,aAA2B,YAC1B,KAAK,iBAAiB,OACvB,IAAkB,EAAgB,MAAM,OAAO,MAAQ;AAEnD,UAAI;AAUA,YAAI;AACA,iBAAO,MAAM,EAAa,OAAO,EAAE,KAAA,GAAK,SAAA,GAAS,OAAA,GAAO,QAAA,EAAM,CAAE;AAAA,QACnE,SACM,GAAP;AACI,UAAI,aAAoB,UACpB,IAAM;AAAA,QAEb;AAEL,UAAI,KAAK;AAUL,eAAO,KAAK,cAAc,OAAO,EAAE,KAAA,GAAK,SAAA,GAAS,OAAA,EAAK,CAAE;AAE5D,YAAM;AAAA,IACtB,CAAa,IAEE;AAAA,EACV;AAAA,EAgBD,kBAAkB,EAAE,KAAA,GAAK,YAAA,GAAY,SAAA,GAAS,OAAA,EAAK,GAAK;AACpD,UAAM,IAAS,KAAK,QAAQ,IAAI,EAAQ,MAAM,KAAK;AACnD,eAAW,KAAS,GAAQ;AACxB,UAAI;AAGJ,YAAM,IAAc,EAAM,MAAM,EAAE,KAAA,GAAK,YAAA,GAAY,SAAA,GAAS,OAAA,EAAK,CAAE;AACnE,UAAI;AAYA,eAAA,IAAS,IACL,MAAM,QAAQ,CAAM,KAAK,EAAO,WAAW,KAItC,EAAY,gBAAgB,UACjC,OAAO,KAAK,CAAW,EAAE,WAAW,KAI/B,OAAO,KAAgB,eAI5B,IAAS,SAGN,EAAE,OAAA,GAAO,QAAA;IAEvB;AAED,WAAO;EACV;AAAA,EAeD,kBAAkB,GAAS,IAAS,GAAe;AAC/C,SAAK,mBAAmB,IAAI,GAAQ,EAAiB,CAAO,CAAC;AAAA,EAChE;AAAA,EAQD,gBAAgB,GAAS;AACrB,SAAK,gBAAgB,EAAiB,CAAO;AAAA,EAChD;AAAA,EAMD,cAAc,GAAO;AAiCjB,IAAK,KAAK,QAAQ,IAAI,EAAM,MAAM,KAC9B,KAAK,QAAQ,IAAI,EAAM,QAAQ,CAAE,CAAA,GAIrC,KAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,KAAK,CAAK;AAAA,EAC5C;AAAA,EAMD,gBAAgB,GAAO;AACnB,QAAI,CAAC,KAAK,QAAQ,IAAI,EAAM,MAAM;AAC9B,YAAM,IAAI,EAAa,8CAA8C;AAAA,QACjE,QAAQ,EAAM;AAAA,MAC9B,CAAa;AAEL,UAAM,IAAa,KAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,QAAQ,CAAK;AAC/D,QAAI,IAAa;AACb,WAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,OAAO,GAAY,CAAC;AAAA;AAGnD,YAAM,IAAI,EAAa,uCAAuC;AAAA,EAErE;AACL;AC9XA,IAAI;AAQG,MAAM,IAA2B,OAC/B,MACD,IAAgB,IAAI,KAEpB,EAAc,iBAAgB,GAC9B,EAAc,iBAAgB,IAE3B;ACOX,SAAS,EAAc,GAAS,GAAS,GAAQ;AAC7C,MAAI;AACJ,MAAI,OAAO,KAAY,UAAU;AAC7B,UAAM,IAAa,IAAI,IAAI,GAAS,SAAS,IAAI,GAsB3C,IAAgB,CAAC,EAAE,KAAA,QASd,EAAI,SAAS,EAAW;AAGnC,IAAA,IAAQ,IAAI,EAAM,GAAe,GAAS,CAAM;AAAA,EACnD,WACQ,aAAmB;AAExB,IAAA,IAAQ,IAAI,EAAY,GAAS,GAAS,CAAM;AAAA,WAE3C,OAAO,KAAY;AAExB,IAAA,IAAQ,IAAI,EAAM,GAAS,GAAS,CAAM;AAAA,WAErC,aAAmB;AACxB,IAAA,IAAQ;AAAA;AAGR,UAAM,IAAI,EAAa,0BAA0B;AAAA,MAC7C,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,WAAW;AAAA,IACvB,CAAS;AAGL,SADsB,IACR,cAAc,CAAK,GAC1B;AACX;ACvEO,SAAS,GAA0B,GAAW,IAA8B,IAAI;AAGnF,aAAW,KAAa,CAAC,GAAG,EAAU,aAAa,KAAI,CAAE;AACrD,IAAI,EAA4B,KAAK,CAAC,MAAW,EAAO,KAAK,CAAS,CAAC,KACnE,EAAU,aAAa,OAAO,CAAS;AAG/C,SAAO;AACX;ACVO,UAAU,GAAsB,GAAK,EAAE,6BAAA,IAA8B,CAAC,SAAS,UAAU,GAAG,gBAAA,IAAiB,cAAc,WAAA,IAAY,IAAM,iBAAA,EAAe,IAAM,CAAA,GAAI;AACzK,QAAM,IAAY,IAAI,IAAI,GAAK,SAAS,IAAI;AAC5C,EAAA,EAAU,OAAO,IACjB,MAAM,EAAU;AAChB,QAAM,IAA0B,GAA0B,GAAW,CAA2B;AAEhG,MADA,MAAM,EAAwB,MAC1B,KAAkB,EAAwB,SAAS,SAAS,GAAG,GAAG;AAClE,UAAM,IAAe,IAAI,IAAI,EAAwB,IAAI;AACzD,IAAA,EAAa,YAAY,GACzB,MAAM,EAAa;AAAA,EACtB;AACD,MAAI,GAAW;AACX,UAAM,IAAW,IAAI,IAAI,EAAwB,IAAI;AACrD,IAAA,EAAS,YAAY,SACrB,MAAM,EAAS;AAAA,EAClB;AACD,MAAI,GAAiB;AACjB,UAAM,IAAiB,EAAgB,EAAE,KAAK,EAAW,CAAA;AACzD,eAAW,KAAgB;AACvB,YAAM,EAAa;AAAA,EAE1B;AACL;ACpBA,MAAM,WAAsB,EAAM;AAAA,EAiB9B,YAAY,GAAoB,GAAS;AACrC,UAAM,IAAQ,CAAC,EAAE,SAAA,QAAe;AAC5B,YAAM,IAAkB,EAAmB;AAC3C,iBAAW,KAAe,GAAsB,EAAQ,KAAK,CAAO,GAAG;AACnE,cAAM,IAAW,EAAgB,IAAI,CAAW;AAChD,YAAI,GAAU;AACV,gBAAM,IAAY,EAAmB,wBAAwB,CAAQ;AACrE,iBAAO,EAAE,UAAA,GAAU,WAAA;QACtB;AAAA,MACJ;AAAA,IAKb;AACQ,UAAM,GAAO,EAAmB,QAAQ;AAAA,EAC3C;AACL;AC9BA,SAAS,GAAS,GAAS;AACvB,QAAM,IAAqB,KACrB,IAAgB,IAAI,GAAc,GAAoB,CAAO;AACnE,EAAA,EAAc,CAAa;AAC/B;ACDA,SAAS,GAAS,GAAS;AAEvB,EAD2B,IACR,SAAS,CAAO;AACvC;ACPA,SAAS,GAAiB,GAAS,GAAS;AACxC,EAAA,GAAS,CAAO,GAChB,GAAS,CAAO;AACpB;ACbA,SAAS,KAAe;AACpB,OAAK,iBAAiB,YAAY,MAAM,KAAK,QAAQ,MAAK,CAAE;AAChE;ACAA,SAAS,KAAc;AAQnB,EAAK,KAAK;AACd;ACfA,MAAM,IAAW,84BAAK;AACtB,QAAQ,IAAI,UAAU;AACtB,QAAQ,IAAI,CAAQ;AAEpB,SAAS,EAAwB,GAA4B;AACnD,QAAA,IAAU,IAAI,QAAQ,CAAQ;AAC5B,SAAA,EAAA,IAAI,gCAAgC,cAAc,GAClD,EAAA,IAAI,8BAA8B,aAAa,GAChD;AACX;AAGA,EAAW,CAAC;AAAA,EACR,kBAAkB,OAAM,MAAS;AAC7B,QAAI,IAAU,EAAM;AAChB,WAAA,EAAQ,SAAS,cACP,IAAA,IAAI,QAAQ,EAAQ,KAAK;AAAA,MAC/B,OAAO,EAAQ;AAAA,MACf,aAAa;AAAA,MACb,SAAS,EAAQ;AAAA,MACjB,WAAW,EAAQ;AAAA,MACnB,WAAW,EAAQ;AAAA,MACnB,QAAQ,EAAQ;AAAA,MAChB,MAAM,EAAQ;AAAA,MACd,UAAU,EAAQ;AAAA,MAClB,UAAU,EAAQ;AAAA,MAClB,gBAAgB,EAAQ;AAAA,MACxB,QAAQ,EAAQ;AAAA,IAAA,CACnB,IAEE;AAAA,EACX;AAAA,EACA,iBAAiB,OAAM,MAAS;AAC5B,QAAI,IAAI,EAAM;AAER,UAAA,IAAU,EAAwB,EAAE,OAAO;AAEjD,WAAO,IAAI,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,YAAY,EAAE,YAAY,SAAA,EAAS,CAAA;AAAA,EACvF;AACJ,CAAC,CAAC;AAEF,GAAiB,CAAQ;AACzB,EAAc,YAAY,OAAM,MACrB,IAAI,SAAS;AAAA,GAAiB;AAAA,EACjC,QAAQ;AAAA,EACR,SAAS,EAAwB,IAAI,SAAS;AAAA,CACjD,CACJ;AAGD;AACA,GAAa","file":"sw.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */\nfunction addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\nexport { addPlugins };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport './_version.js';\n/**\n * This method is deprecated, and will be removed in Workbox v7.\n *\n * Calling self.skipWaiting() is equivalent, and should be used instead.\n *\n * @memberof workbox-core\n */\nfunction skipWaiting() {\n    // Just call self.skipWaiting() directly.\n    // See https://github.com/GoogleChrome/workbox/issues/2525\n    if (process.env.NODE_ENV !== 'production') {\n        logger.warn(`skipWaiting() from workbox-core is no longer recommended ` +\n            `and will be removed in Workbox v7. Using self.skipWaiting() instead ` +\n            `is equivalent.`);\n    }\n    void self.skipWaiting();\n}\nexport { skipWaiting };\n","import { precacheAndRoute, addPlugins, addRoute } from 'workbox-precaching';\nimport { skipWaiting, clientsClaim } from 'workbox-core';\nimport { registerRoute } from 'workbox-routing';\n\n/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\ndeclare let self: ServiceWorkerGlobalScope;\n\nconst manifest = self.__WB_MANIFEST;\nconsole.log('UPDATED!');\nconsole.log(manifest);\n\nfunction headersCrossOrigIsolate(original: Headers): Headers {\n    const headers = new Headers(original);\n    headers.set(\"Cross-Origin-Embedder-Policy\", \"require-corp\"); // or: credentialless\n    headers.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n    return headers;\n}\n\n// Force cross-origin-isolation (thanks github pages)\naddPlugins([{\n    requestWillFetch: async param => {\n        let request = param.request;\n        if (request.mode === \"no-cors\") {\n            request = new Request(request.url, {\n                cache: request.cache,\n                credentials: \"omit\",\n                headers: request.headers,\n                integrity: request.integrity,\n                keepalive: request.keepalive,\n                method: request.method,\n                mode: request.mode,\n                redirect: request.redirect,\n                referrer: request.referrer,\n                referrerPolicy: request.referrerPolicy,\n                signal: request.signal,\n            });\n        }\n        return request;\n    },\n    fetchDidSucceed: async param => {\n        let r = param.response;\n\n        const headers = headersCrossOrigIsolate(r.headers);\n\n        return new Response(r.body, { status: r.status, statusText: r.statusText, headers });\n    },\n}]);\n\nprecacheAndRoute(manifest);\nregisterRoute('/version', async handle => {\n    return new Response(__COMMIT_HASH__, {\n        status: 200,\n        headers: headersCrossOrigIsolate(new Headers()),\n    });\n})\n\n// When updating:\nskipWaiting();// Become active immediately\nclientsClaim();// Claim pages that would have had the previous SW\n"]}